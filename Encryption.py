# -*- coding: utf-8 -*-
"""Question1.ipynb

Automatically generated by Colaboratory.


a. Kamasuthra
"""

def encrypt(table, words):
    cipher = ''
    for ch in words:
        if str.isalpha(ch):
            ch = getOpponent(table, ch)
        cipher += ch
    return cipher

def decrypt(table, words):
    return encrypt(table, words)

def toLower(ch, flag):
    if flag:
        return ch.lower()
    else:
        return ch

def getPosition(table, ch):
    row = -1

    if ch in table[0]:
        row = 0
    elif ch in table[1]:
        row = 1

    if row != -1:
        return (row, table[row].index(ch))
    else:
        return (None, None);

def getOpponent(table, ch):
    flag = False

    if ch.islower():
        flag = True

    row, col = getPosition(table, ch.upper())

    if row == 1:
        return toLower(table[0][col], flag)
    elif row == 0:
        return toLower(table[1][col], flag)
    else:
        return ch


if __name__ == '__main__':
    table = [
        [ 'W', 'I', 'R', 'L', 'Z', 'U', 'B', 'J', 'Q', 'Y', 'C', 'V', 'F' ],
        [ 'A', 'X', 'D', 'M', 'T', 'E', 'S', 'N', 'P', 'G', 'O', 'K', 'H' ] ]

    text = "SUMUDU NISANSALA AMARASINGHE";

    ciphertext = encrypt(table, text)

    print(ciphertext)

    print(decrypt(table, ciphertext))

"""b. Caeser Cipher"""

def generate_key(n):
  letter="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  key={}
  cnt=0
  length=len(letter)
  for l in letter:
    key[l]=letter[(cnt+n)%length]
    cnt+=1
  return key
k=generate_key(11)

def encrypt(key,message):
  cipher=""
  for c in message:
    if c in key:
      cipher+=key[c]
    else:
      cipher+=c
  print(cipher)


message="SUMUDU NISANSALA AMARASINGHE"
encrypt(k,message)

"""c. Caeser_Cipher part II"""

import matplotlib.pyplot as plt
from collections import Counter

def generate_key(n):
    letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    key = {}
    cnt = 0
    length = len(letter)
    for l in letter:
        key[l] = letter[(cnt + n) % length]
        cnt += 1
    return key

def encrypt(key, message):
    cipher = ""
    for c in message:
        if c in key:
            cipher += key[c]
        else:
            cipher += c
    return cipher

def frequency_analysis(ciphertext):
    # Count the frequency of each letter in the ciphertext
    letter_freq = Counter(ciphertext)

    # Sort the frequencies in descending order
    sorted_freq = sorted(letter_freq.items(), key=lambda x: x[1], reverse=True)

    # Calculate percentages
    total_chars = len(ciphertext)
    percentages = {k: (v / total_chars) * 100 for k, v in sorted_freq}

    return percentages

# Original message
message = "SUMUDU NISANSALA AMARASINGHE"

# Generate key and encrypt message
key = generate_key(11)
cipher_text = encrypt(key, message)

# Perform frequency analysis
freq_analysis_result = frequency_analysis(cipher_text)

# Create histogram
letters = list(freq_analysis_result.keys())
percentages = list(freq_analysis_result.values())

plt.bar(letters, percentages)
plt.xlabel('Letters')
plt.ylabel('Percentage (%)')
plt.title('Letter Frequency Analysis')
plt.show()